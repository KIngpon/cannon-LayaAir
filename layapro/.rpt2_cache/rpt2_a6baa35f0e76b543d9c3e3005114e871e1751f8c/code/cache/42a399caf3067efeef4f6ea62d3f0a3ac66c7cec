{
  "code": "import { GameUtils } from \"../../utils/GameUtils\";\r\nimport { GameMgr } from \"../../ctrl/GameMgr\";\r\nexport class Body extends Laya.Script {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.tempV3 = new Laya.Vector3();\r\n        this.tempQuaternion = new Laya.Quaternion();\r\n        this.tempCV3 = new CANNON.Vec3();\r\n        this.tempCQuaternion = new CANNON.Quaternion();\r\n    }\r\n    get Body() {\r\n        return this.mbody;\r\n    }\r\n    OnInit() {\r\n        this.mSp = this.owner;\r\n        this.data = JSON.parse(this.userData);\r\n        for (let index = 0; index < this.data.shapes.length; index++) {\r\n            this.data.shapes[index] = JSON.parse(this.data.shapes[index]);\r\n        }\r\n        this.pyWorld = GameMgr.Inst.world;\r\n        if (this.mbody == null) {\r\n            let op = {};\r\n            op.mass = this.data.mass;\r\n            op.type = this.data.type;\r\n            op.quaternion = GameUtils.layaQuaternion2CanQuaternion(this.mSp.transform.rotation);\r\n            op.position = GameUtils.layaV32CannonV3(this.mSp.transform.position);\r\n            op.linearDamping = this.data.linearDamping;\r\n            this.mbody = new CANNON.Body(op);\r\n            this.pyWorld.addBody(this.mbody);\r\n            for (let index = 0; index < this.data.shapes.length; index++) {\r\n                const element = this.data.shapes[index];\r\n                if (element.type == CANNON.Shape.types.BOX) {\r\n                    let boxData = element;\r\n                    let size = new CANNON.Vec3();\r\n                    size.x = boxData.size.x * 0.5 * this.mSp.transform.scale.x;\r\n                    size.y = boxData.size.y * 0.5 * this.mSp.transform.scale.y;\r\n                    size.z = boxData.size.z * 0.5 * this.mSp.transform.scale.z;\r\n                    let offset = new CANNON.Vec3();\r\n                    offset.x = boxData.center.x;\r\n                    offset.y = boxData.center.y;\r\n                    offset.z = boxData.center.z;\r\n                    let box = new CANNON.Box(size);\r\n                    this.Body.addShape(box, offset);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onDestroy() {\r\n        if (this.mbody != null)\r\n            this.pyWorld.removeBody(this.mbody);\r\n    }\r\n    onUpdate() {\r\n        if (this.mbody == null)\r\n            return;\r\n        if (this.mbody.type == CANNON.Body.DYNAMIC) {\r\n            this.tempV3.setValue(this.mbody.position.x, this.mbody.position.y, this.mbody.position.z);\r\n            this.mSp.transform.position = this.tempV3;\r\n            GameUtils.SetV4(this.tempQuaternion, this.mbody.quaternion);\r\n            this.mSp.transform.rotation = this.tempQuaternion;\r\n        }\r\n        else {\r\n            this.tempCV3.set(this.mSp.transform.position.x, this.mSp.transform.position.y, this.mSp.transform.position.z);\r\n            this.tempCQuaternion.set(this.mSp.transform.rotation.x, this.mSp.transform.rotation.y, this.mSp.transform.rotation.z, this.mSp.transform.rotation.w);\r\n            this.mbody.position = this.tempCV3;\r\n            this.mbody.quaternion = this.tempCQuaternion;\r\n        }\r\n    }\r\n    updateTran() {\r\n    }\r\n}\r\n",
  "references": [
    "G:/tst/test2/src/YK/coms/ICom.ts",
    "G:/tst/test2/src/YK/data/BodyData.ts",
    "G:/tst/test2/src/YK/utils/GameUtils.ts",
    "G:/tst/test2/src/YK/ctrl/GameMgr.ts"
  ]
}
